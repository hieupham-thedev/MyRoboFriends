{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["robots","fetch","then","response","json","users","filteredrobots","ReactDOM","render","App","document","getElementById","CardList","className","map","robot","id","name","username","email","alt","src","searchchange","event","temp","target","value","filter","toLowerCase","includes","type","placeholder","onChange","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kLAGIA,EAAS,GAEbC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAUL,EAASK,EAAOC,EAAc,YAAON,GAASO,IAASC,OAAOC,IAAOC,SAASC,eAAe,YAE/G,IAAIL,EAAiB,GAcrB,SAASM,EAASZ,GAChB,OACE,yBAAKa,UAAU,iCAEXb,EAAOc,KAAI,SAAAC,GAAU,OAffC,EAiBKD,EAAMC,GAjBPC,EAiBWF,EAAME,KAjBXC,EAiBiBH,EAAMG,SAjBbC,EAiBuBJ,EAAMI,MAf3D,yBAAKN,UAAU,mEACb,yBAAKA,UAAU,MAAMO,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cACrC,yBAAKH,UAAU,WAAWI,GAC1B,yBAAKJ,UAAU,eAAeK,GAC9B,yBAAKL,UAAU,aAAaM,IANlC,IAAcH,EAAIC,EAAMC,EAAUC,MAyBlC,SAASG,EAAaC,GACpB,IAAIC,EAAOD,EAAME,OAAOC,MACxBpB,EAAiBN,EAAO2B,QAAO,SAAAZ,GAAK,OAClCA,EAAME,KAAKW,cAAcC,SAASL,IAClCT,EAAMG,SAASU,cAAcC,SAASL,IACtCT,EAAMI,MAAMS,cAAcC,SAASL,MAErCjB,IAASC,OACPC,IACAC,SAASC,eAAe,SAkB5B,SAASF,IACP,OACE,yBAAKI,UAAU,gCACb,yBAAKA,UAAU,aAAf,8BACA,yBAAKA,UAAU,UAAf,8CAhBF,yBAAKA,UAAU,uBACb,2BACEA,UAAU,sDACViB,KAAK,SACLC,YAAY,gBACZC,SAAUV,KAaXV,EAASN,IAMDG,QChEKwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXN9B,IAASC,OACP,kBAAC,IAAM8B,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDwHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.790b7c4c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nvar robots = [];\n\nfetch(\"https://jsonplaceholder.typicode.com/users\")\n  .then(response => response.json())\n  .then(users => {robots = users; filteredrobots = [...robots]; ReactDOM.render(App(), document.getElementById('root'))});\n\nvar filteredrobots = [];\n\n\nfunction Card(id, name, username, email) {\n  return (\n    <div className='flex flex-column ba br3 bg-green grow dib black-90 w-20 mr2 mb3'>\n      <img className=\"mb2\" alt='robots' src={`https://robohash.org/${id}?200x200`} />\n      <div className=\"f4 b tc\">{name}</div>\n      <div className=\"f5 tc i mv1\">{username}</div>\n      <div className=\"f6 tc mb2\">{email}</div>\n    </div>\n  );\n}\n\nfunction CardList(robots) {\n  return (\n    <div className='flex flex-wrap justify-around'>\n      {\n        robots.map(robot => {return (\n            \n              Card(robot.id, robot.name, robot.username, robot.email)\n            \n          )})\n      }\n    </div>\n  );\n}\n\nfunction searchchange(event) {\n  let temp = event.target.value;\n  filteredrobots = robots.filter(robot => \n    robot.name.toLowerCase().includes(temp) || \n    robot.username.toLowerCase().includes(temp) || \n    robot.email.toLowerCase().includes(temp)\n  );\n  ReactDOM.render(\n    App(),\n    document.getElementById('root')\n  );\n}\n\nfunction SearchBox() {\n  return (\n    <div className='flex justify-center'>\n      <input\n        className='input-reset ba bw1 b--light-silver pa2 ma3 w-40 br3' \n        type='search' \n        placeholder='search robots' \n        onChange={searchchange}\n      />\n    </div>\n  );\n}\n\n\nfunction App() {\n  return (\n    <div className=\"flex flex-column item-center\">\n      <div className=\"f1 tc ma2\">Welcome to the RoboFriends</div>\n      <div className=\"f4 tc \">Using our search engine to find your robot</div>\n      {SearchBox()}\n      {CardList(filteredrobots)}    \n    </div>\n    );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}